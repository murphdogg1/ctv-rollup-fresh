'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Download, BarChart3, TrendingUp, Eye } from 'lucide-react';
import { toast } from 'sonner';

interface Campaign {
  id: string;
  name: string;
}

interface AppRollup {
  app_name: string;
  impressions: number;
  completes: number;
  avg_vcr: number;
  content_count: number;
}

interface GenreRollup {
  genre_canon: string;
  impressions: number;
  completes: number;
  avg_vcr: number;
  content_count: number;
}

interface ContentRollup {
  content_title: string;
  content_network_name: string;
  impressions: number;
  completes: number;
  avg_vcr: number;
}

export default function CampaignReportsPage() {
  const params = useParams();
  const campaignId = params.id as string;
  
  const [campaign, setCampaign] = useState<Campaign | null>(null);
  const [appRollup, setAppRollup] = useState<AppRollup[]>([]);
  const [genreRollup, setGenreRollup] = useState<GenreRollup[]>([]);
  const [contentRollup, setContentRollup] = useState<ContentRollup[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('app');

  useEffect(() => {
    if (campaignId) {
      fetchCampaignData();
    }
  }, [campaignId]);

  const fetchCampaignData = async () => {
    try {
      setIsLoading(true);
      
      // Fetch campaign info
      const campaignsResponse = await fetch('/api/campaigns');
      const campaignsData = await campaignsResponse.json();
      const currentCampaign = campaignsData.campaigns.find((c: Campaign) => c.id === campaignId);
      setCampaign(currentCampaign);

      // Fetch rollup data
      const [appResponse, genreResponse, contentResponse] = await Promise.all([
        fetch(`/api/campaigns/${campaignId}/rollup/app`),
        fetch(`/api/campaigns/${campaignId}/rollup/genre`),
        fetch(`/api/campaigns/${campaignId}/rollup/content`)
      ]);

      const appData = await appResponse.json();
      const genreData = await genreResponse.json();
      const contentData = await contentResponse.json();

      if (appData.success) setAppRollup(appData.rollup);
      if (genreData.success) setGenreRollup(genreData.rollup);
      if (contentData.success) setContentRollup(contentData.rollup);

    } catch (error) {
      console.error('Failed to fetch campaign data:', error);
      toast.error('Failed to fetch campaign data');
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = async (type: string) => {
    try {
      const response = await fetch(`/api/campaigns/${campaignId}/export?type=${type}`);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${campaign?.name || 'campaign'}-${type}-rollup.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      toast.success(`${type.charAt(0).toUpperCase() + type.slice(1)} rollup exported successfully!`);
    } catch (error) {
      console.error('Export failed:', error);
      toast.error('Export failed');
    }
  };

  const formatNumber = (num: number) => {
    return new Intl.NumberFormat().format(num);
  };

  const formatVCR = (vcr: number) => {
    return `${vcr}%`;
  };

  if (isLoading) {
    return (
      <div className="container mx-auto py-8">
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-lg text-gray-600">Loading campaign reports...</p>
        </div>
      </div>
    );
  }

  if (!campaign) {
    return (
      <div className="container mx-auto py-8">
        <div className="text-center py-12">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Campaign Not Found</h2>
          <p className="text-gray-600">The requested campaign could not be found.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">{campaign.name}</h1>
            <p className="text-muted-foreground">Campaign Performance Reports</p>
          </div>
          <Button variant="outline" asChild>
            <a href="/campaigns">
              <Eye className="w-4 h-4 mr-2" />
              Back to Campaigns
            </a>
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="app">App Rollup</TabsTrigger>
          <TabsTrigger value="genre">Genre Rollup</TabsTrigger>
          <TabsTrigger value="content">Content Rollup</TabsTrigger>
        </TabsList>

        <TabsContent value="app" className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-semibold">App Performance</h2>
            <Button onClick={() => handleExport('app')}>
              <Download className="w-4 h-4 mr-2" />
              Export CSV
            </Button>
          </div>
          
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {appRollup.map((app) => (
              <Card key={app.app_name}>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">{app.app_name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Impressions:</span>
                      <span className="font-medium">{formatNumber(app.impressions)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Completes:</span>
                      <span className="font-medium">{formatNumber(app.completes)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">VCR:</span>
                      <span className="font-medium">{formatVCR(app.avg_vcr)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Content:</span>
                      <span className="font-medium">{app.content_count}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="genre" className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-semibold">Genre Performance</h2>
            <Button onClick={() => handleExport('genre')}>
              <Download className="w-4 h-4 mr-2" />
              Export CSV
            </Button>
          </div>
          
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {genreRollup.map((genre) => (
              <Card key={genre.genre_canon}>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">{genre.genre_canon}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Impressions:</span>
                      <span className="font-medium">{formatNumber(genre.impressions)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Completes:</span>
                      <span className="font-medium">{formatNumber(genre.completes)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">VCR:</span>
                      <span className="font-medium">{formatVCR(genre.avg_vcr)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Content:</span>
                      <span className="font-medium">{genre.content_count}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="content" className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-semibold">Content Performance</h2>
            <Button onClick={() => handleExport('content')}>
              <Download className="w-4 h-4 mr-2" />
              Export CSV
            </Button>
          </div>
          
          <Card>
            <CardContent className="p-0">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Content Title</TableHead>
                    <TableHead>Network</TableHead>
                    <TableHead className="text-right">Impressions</TableHead>
                    <TableHead className="text-right">Completes</TableHead>
                    <TableHead className="text-right">VCR</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {contentRollup.map((content, index) => (
                    <TableRow key={index}>
                      <TableCell className="font-medium">{content.content_title}</TableCell>
                      <TableCell>{content.content_network_name}</TableCell>
                      <TableCell className="text-right">{formatNumber(content.impressions)}</TableCell>
                      <TableCell className="text-right">{formatNumber(content.completes)}</TableCell>
                      <TableCell className="text-right">{formatVCR(content.avg_vcr)}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
